<?php
/**
 * DPS payment confirmation response model
 * @link http://www.dps.co.nz/technical_resources/ecommerce_hosted/pxpay.html#Response XML structure
 * 
 * @package efusion
 * @subpackage dps
 */
class payment_confirmation_response extends model
{
	/**
	 * The Amount of the transaction
	 * @var decimal
	 */
	var $AmountSettlement;
	
	/**
	 * Authorisation code from the bank
	 * @var string
	 */
	var $AuthCode;
	
	/**
	 * Card used (Visa,MasterCard,Bankcard etc)
	 * @var string
	 */
	var $CardName;

	/**
	 * The Card Holder Name used for the transaction
	 * @var string
	 */
	var $CardHolderName;

	/**
	 * The card number used for the transaction in truncated form.
	 * @var string
	 */		
	var $CardNumber;
	
	/**
	 * The expiry date of the card used in the transaction.
	 * @var string
	 */
	var $DateExpiry;
	
	/**
	 * DPS transaction reference. Sent back to DPS for refund and complete transactions.
	 * @var string
	 */
	var $DpsTxnRef;
	
	/**
	 * Non-zero if transaction successful, 0 if declined or unsuccessful
	 * @var int
	 */
	var $Success;
	
	/**
	 * Response Text associated with the result of the transaction
	 * @var string
	 */
	var $ResponseText;
	
	/**
	 * Contains the billing ID generated by DPS when adding a card for recurring billing.
	 * @var string
	 */
	var $DpsBillingId;
	
	/**
	 * The Currency of the transaction
	 * @var string
	 */
	var $CurrencySettlement;
	
	/**
	 * Optional Free Text
	 * @var string
	 */
	var $TxnData1;
	
	/**
	 * Optional Free Text
	 * @var string
	 */
	var $TxnData2;
	
	/**
	 * Optional Free Text
	 * @var string
	 */
	var $TxnData3;
	
	
	function validate()
	{
		$this->clear_model_errors();
		
		$this->validates_presence_of('AmountSettlement');
		$this->validates_presence_of('Success');
		$this->validates_presence_of('DpsTxnRef');
		$this->validates_presence_of('CurrencySettlement');
		$this->validates_presence_of('ResponseText');
		
		$this->validates_numericality_of('AmountSettlement');
		
		return parent::validate();
	}
	
	/**
	 * Sets class attributes via the xml string
	 * @param string $xml string/xml The XML string response from DPS
	 * @return boolean true if xml is valid and successfully parsed, else false
	 */
	function set_field_values_from_xml($xml)
	{
		if(!$response_obj = $this->_get_xml_as_object($xml))
			return false;
		
		$this->set_field_values_from_object($response_obj->Response);
		
		return $this->validate();
	}
	
	/**
	 * Parses an XML string and returns it as an object with nodes
	 */
	function _get_xml_as_object($xml)
	{
		$xml_parser =& model::create('xml_parser');
		
		if(!$obj_response = $xml_parser->parse_xml_string_into_node_tree($xml, $lowercase_xml_tags = false))
			return false;
			
		$xml_parser->cleanup();
		
		return $obj_response;
	}
	
	function is_payment_authorized()
	{
		if(!empty($this->Success))
			return true;
		
		$this->_errors[] = 'Your payment was declined because: ' . $this->ResponseText;
		return false;
	}
}
?>