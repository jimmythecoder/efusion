<?php
/**
 * DPS payment request model
 * @link http://www.dps.co.nz/technical_resources/ecommerce_hosted/pxpay.html#GenerateRequest XML structure
 * 
 * @package efusion
 * @subpackage dps
 */
class payment_request extends model
{
	/**
	 * DPS account UserId
	 * @var string
	 */
	var $PxPayUserId;
	
	/**
	 * DPS account 64 character key
	 * @var string
	 */
	var $PxPayKey;
	
	/**
	 * Amount value in d.cc format.
	 * @var decimal
	 */
	var $AmountInput;
	
	/**
	 * Needs to be generated to add a card for recurring billing and sent again when rebilling transactions.
	 * @var string
	 */
	var $BillingId;
	
	/**
	 * Currency of AmountInput (NZD|USD)
	 * @var string
	 */
	var $CurrencyInput;
	
	/**
	 * The BillingId generated by DPS when adding a card for recurring billing. Needed for rebilling transactions when you do not use your own BillingId.
	 * @var string
	 */
	var $DpsBillingId;
	
	/**
	 * DPS transaction reference. Sent back to DPS for refund and complete transactions.
	 * @var string
	 */
	var $DpsTxnRef;
	
	/**
	 * Optional Email Address
	 * @var string
	 */
	var $EmailAddress;
	
	/**
	 * Needed for recurring billing transactions when adding a card to the DPS system. Set element to 1 for true and 0 for false
	 * @var int
	 */
	var $EnableAddBillCard;
	
	/**
	 * Reference field to appear on transaction reports
	 * @var string
	 */
	var $MerchantReference;
	
	/**
	 * Optional Free Text
	 * @var string
	 */
	var $TxnData1;
	
	/**
	 * Optional Free Text
	 * @var string
	 */
	var $TxnData2;
	
	/**
	 * Optional Free Text
	 * @var string
	 */
	var $TxnData3;
	
	/**
	 * Auth, Complete, Purchase, Refund
	 * @var string
	 */
	var $TxnType;
	
	/**
	 * Contains a unique, COM or merchant application generated value that uniquely identifies the transaction 
	 * @var string
	 */
	var $TxnId;
	
	/**
	 * Url of customer site transaction failure page
	 * @var string
	 */
	var $UrlFail;
	
	/**
	 * Url of customer site transaction success page
	 * @var string
	 */
	var $UrlSuccess;
	
	
	function validate()
	{
		$this->validates_presence_of('PxPayUserId');
		$this->validates_presence_of('PxPayKey');
		$this->validates_presence_of('AmountInput');
		$this->validates_presence_of('CurrencyInput');
		$this->validates_presence_of('MerchantReference');
		$this->validates_presence_of('TxnType');
		$this->validates_presence_of('TxnId');
		$this->validates_presence_of('UrlFail');
		$this->validates_presence_of('UrlSuccess');
		$this->validates_presence_of('EnableAddBillCard');
		
		$this->validates_numericality_of('AmountInput');
		$this->validates_numericality_of('EnableAddBillCard');

		$this->validates_regular_expression_of('TxnType','/^(Purchase|Auth|Complete|Refund)$/','Incorrect transaction type, must be one of Purchase|Auth|Complete|Refund');
		$this->validates_regular_expression_of('UrlSuccess','/^(http|https):\/\/(([A-Z0-9][A-Z0-9_-]*)(\.[A-Z0-9][A-Z0-9_-]*)+)(:(\d+))?\//i','Invalid Success URL');
		$this->validates_regular_expression_of('UrlFail','/^(http|https):\/\/(([A-Z0-9][A-Z0-9_-]*)(\.[A-Z0-9][A-Z0-9_-]*)+)(:(\d+))?\//i','Invalid Fail URL');
		
		$this->validates_length_of('PxPayKey',64,64,'The DPS PX Pay Key is not 64 characters long');

		return parent::validate();
	}
	
	/**
	 * Sends the payment confirmation request to DPS server via HTTP Post and returns the string result
	 * @param string $url The url to post the request to
	 * @return string/xml The XML string response from DPS
	 */
	function send($url)
	{
		if(!$this->validate())
			return false;
			
		$payment_gateway_request = $this->_get_payment_confirmation_request_as_xml();
			
		if($payment_gateway_response = HTTP::post_request($payment_gateway_request, $url))
			return $payment_gateway_response;
			
		$this->_errors[] = 'There was a problem communicating to the credit card processing station, please try again or email the website owner.';
		return false;		
	}
	
	/**
	 * Generates a DPS compatible XML string to post as a payment confirmation request
	 * @return string XML request string
	 */
	function _get_payment_confirmation_request_as_xml()
	{
		$fields_as_array = $this->field_names_as_array();
		
		$xml =  '<GenerateRequest>';

		foreach($fields_as_array as $key => $field)
			$xml .= '<' . $field . '>' . htmlentities($this->$field,ENT_NOQUOTES,'UTF-8') . '</' . $field . '>';
					
		$xml .= '</GenerateRequest>';
		
		return $xml;
	}
	
	/**
	 * Sets and formats the AmountInput from a number
	 * @param float $amount currency amount
	 */
	function set_AmountInput($amount)
	{
		$this->AmountInput = number_format($amount,2,'.','');
	}
}
?>